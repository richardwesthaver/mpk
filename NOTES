1 compiler
══════════

  we have partially implemented a tree walking interpretter - now time
  to implement a compiler. starting with byte-compilation
  • [Bytecode compilers and interpreters | Max Bernstein]
  • [A Bytecode Virtual Machine · Crafting Interpreters]
  • [Virtual Machine (VM), Bytecode and Interpreter - Create Your Own
    Programming Language with Rust]
  • <https://www.cs.wustl.edu/~cytron/cacweb/Tutorial/Visitor/>

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   op      code  ?                        
   VOID       0  nop                      
   PUSH       1  push val onto stack      
   LOOKUP     2  lookup name in env       
   IF         3                           
   JMP        4  jump to rel pos in stack 
   FN         5                           
                                        
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ━━━━━━━━
   SN     
   LN     
   X      
   J      
   RJ     
   MF     
  ━━━━━━━━


[Bytecode compilers and interpreters | Max Bernstein]
<https://bernsteinbear.com/blog/bytecode-interpreters/>

[A Bytecode Virtual Machine · Crafting Interpreters]
<https://craftinginterpreters.com/a-bytecode-virtual-machine.html>

[Virtual Machine (VM), Bytecode and Interpreter - Create Your Own
Programming Language with Rust]
<https://createlang.rs/01_calculator/vm.html>


2 Background
════════════

  Over the years I've seen many popular creative tools implement
  subscription-based/freemium payment models, web-based/always-online
  tech, non-features/bloat, incompatible APIs, and colorful marketing. I
  don't care for any of these things and I don't like the direction
  these tools are taking us. The philosophy always seems to be that the
  computer impedes our ability to be creative – but don't worry, this
  product will hide all the tricky bits from you so that you can focus
  on what matters - making things!

  In reality such tools do indeed hide the tricky bits. You can launch
  these applications with a pretty GUI, plug in your hardware and start
  working immediately. No need to pop the hood and look inside, because
  things Just Work. This is quite valuable, especially for the average
  user who doesn't want to dive head first into the endless pit that is
  modern-day multimedia programming and configuration. There are some
  significant drawbacks to this methodology though.

  First, when you run into unexpected behavior such as your Audio
  Interface not being recognized by your tools, you need to pray that
  someone more knowledgeable than you has encountered the same issue and
  that there is a fix available that is compatible with your tools. In
  the worst case you might not even know how to describe your issue and
  spend a night or two furiously googling for answers. In most cases you
  can probably find a solution, but you don't actually learn anything
  meaningful from this experience. You're just putting a bandaid on and
  not reasoning about why you're bleeding in the first place.

  Another thing I've noticed with these types of tools is that we become
  very committed to them. This is not specific to creative tools, and
  the best example that comes to mind is Emacs vs Vim which are two code
  editors that serve virtually the same purpose as far in as they edit
  text. The two communites, separated by a line in the sand are very
  committed to their tool of choice, and the friendly competition
  between them helps drive feature development for both
  projects. However, this type of commitment can be /dangerous/ for
  purely creative pursuits. In today's digital world, the tools we
  choose define the work we are capable of more than ever before. If we
  commit to a specific creative tool and decide that this is how we will
  use the computer to create things, we will only ever be capable of
  what our tools can do. Never commit.

  My final objection to modern creative tools has to do with those
  tricky bits I previously mentioned. That's where the magic is.


3 lilypond
══════════

  ┌────
  │ \relative c' {
  │   g a b c
  │   d e f g
  │   f e d c
  │   b a g a
  │   b c d e
  │   f g f e
  │   d c b a
  │   g1
  │ }
  └────


4 thoughts
══════════

  • studio management, organization, support, storage, indexing
    • database
  • mediums & medias
  • Software
    • Patchers
      • [Max]
      • [Pure Data]
      • [Reaktor]
    • DAWs
      • [Ableton Live]
      • [Bitwig Studio]
      • [Reason]
      • [FL Studio]
  • Hardware
    • [Octatrack]
    • [OP-Z]
    • [Buchla]
  • Music
    • [Radiohead]
    • [Pink Floyd]
    • [FJAAK]
    • [Bassnectar]
    • [Partibio69]
    • [VURRO]
    • [Ajax Spearman of the Sun]
    • [Venetian Snares]
    • [Aphex Twin]
    • [Meng Qi]
    • [Disasterpeace]


[Max] <https://cycling74.com/products/max>

[Pure Data] <https://puredata.info/>

[Reaktor]
<https://www.native-instruments.com/en/products/komplete/synths/reaktor-6/>

[Ableton Live] <https://www.ableton.com>

[Bitwig Studio] <https://www.bitwig.com/>

[Reason] <https://www.reasonstudios.com/>

[FL Studio] <https://www.image-line.com/>

[Octatrack] <https://www.elektron.se/products/octatrack-mkii/>

[OP-Z] <https://teenage.engineering/products/op-z>

[Buchla] <https://buchla.com/>

[Radiohead] <https://www.youtube.com/watch?v=DWuAn6C8Mfc>

[Pink Floyd] <https://www.youtube.com/watch?v=PGwPSPIhohk>

[FJAAK] <https://www.youtube.com/watch?v=6ZwItYjqXR0>

[Bassnectar] <https://www.youtube.com/watch?v=mjlOw6dNeS0>

[Partibio69] <https://www.youtube.com/watch?v=3cSqRMioRik>

[VURRO] <https://www.youtube.com/watch?v=J8sS5NkADBE>

[Ajax Spearman of the Sun] <https://www.youtube.com/watch?v=PoJKpE165_w>

[Venetian Snares] <https://www.youtube.com/watch?v=tbLt0S0W5jE>

[Aphex Twin] <https://www.youtube.com/watch?v=961uG4Ixg_Y>

[Meng Qi] <https://www.youtube.com/watch?v=6ZwItYjqXR0&list=RDMM>

[Disasterpeace] <https://disasterpeace.com>


5 tech
══════

  • notation
  • patchers
  • plugins
  • data
  • ui
  • net
  • tracker??
  • io


6 sql notes
═══════════

  Indexes should not be used in −
  • Small tables.
  • Tables that have frequent, large batch update or insert operations.
  • Columns that contain a high number of NULL values.
  • Columns that are frequently manipulated.

  ┌────
  │ attach database 'db' as 'alias'
  │ 
  │ detach database 'alias'
  │ 
  │ .tables
  │ .schema 
  │ 
  │ create table db.table_name(
  │   id int primary key not null,
  │   name text not null,
  │   rms real
  │ )
  │ 
  │ drop table db.table_name
  │ 
  │ insert into table_name ([c1,c2,c3]) values (v1,v2,v3)
  │ 
  │ select c1,c2,c3 from table_name
  │ 
  │ select * from table_name
  │ 
  │ select tbl_name from sqlite_master where type = 'table'
  │ 
  │ select c1,c2,c3 from table_name where c1 > c2
  │ 
  │ select count(*) as 'count' from table
  │ 
  │ select current_timestamp
  │ 
  │ select c1 from table where exists (select c1 from table where c3 > 65)
  │ 
  │ update table set c1 = 'val' where c1 = 'noval'
  │ 
  │ delete from table where COND
  │ 
  │ select distinct c3 from table limit 3 offset 2 group by c1 having count(c1) > 2 order by c2 asc
  │ 
  │ pragma pragma_name
  │ pragma pname = 2
  │ 
  │ select name from sqlite_master where type = 'trigger'
  │ 
  │ drop trigger 'trigger_name'
  └────

  • UUID conversion
    ┌────
    │ select hex (artistid) from track_tags_musicbrainz
    │ 
    │ SELECT substr(hex(artistid), 1, 8)
    │ || '-' || substr(hex(artistid), 9, 4)
    │ || '-' || substr(hex(artistid), 13, 4)
    │ || '-' || substr(hex(artistid), 17, 4)
    │ || '-' || substr(hex(artistid), 21, 12)
    │ FROM [track_tags_musicbrainz]
    └────


7 db sync
═════════

  ┌────
  │ select case when path = '/Users/ellis/mpk/tracks/Nick Waterhouse/Some Place/02 That Place.fla' and checksum = '9fc9c8107d9f011196c1aeb64d8ad4501a83262e69e0b7ef7df6168f19a5d03' then 'found'
  │ when path = '/Users/ellis/mpk/tracks/Nick Waterhouse/Some Place/02 That Place.fla' and checksum != '9fc9c8107d9f011196c1aeb64d8ad4501a83262e69e0b7ef7df6168f19a5d03' then 'modified'
  │ when path != '/Users/ellis/mpk/tracks/Nick Waterhouse/Some Place/02 That Place.fla' and checksum = '9fc9c8107d9f011196c1aeb64d8ad4501a83262e69e0b7ef7df6168f19a5d03' then 'moved'
  │ end result
  │ from tracks
  │ where path = '/Users/ellis/mpk/tracks/Nick Waterhouse/Some Place/02 That Place.fla'
  │ or checksum = '9fc9c8107d9f011196c1aeb64d8ad4501a83262e69e0b7ef7df6168f19a5d03';
  └────


8 IPC
═════

  We have quite a bit of functionality now. It's time to think about how
  to interact with them efficiently.

  The primary goal is to daemonize our services (HTTP, OSC, SESH) and
  interact with them remotely, via REPL. The REPL is a Client which
  interacts with the Daemon Proxy Server. Messages are passed from REPL
  to Proxy to external Endpoints and then sends status back to Client.

  • Modes of Operation:
    Detached
          client and daemon run in separate processes
          • considerations
            • run over network? or local only?
            • configuration
            • protocols
            • shutdown/startup/connection behavior
    Attached
          client and daemon run in the same unified process
    Oneshot
          client and daemon run in same process temporarily, for
          short-lived one-off commands

  • Interface:
    • UDP or UDS

  • encoding/decoding:
    • raw or bincode


9 DSL
═════

  [GitHub - cloudflare/wirefilter: An execution engine for
  Wireshark-like filters] [Cloudflare - Building Fast Interpreters in
  Rust] [Introduction - Writing Interpreters in Rust: a Guide] [Crafting
  Interpreters]
  ┌────
  │ fs == freesound
  │ 
  │ db == database
  │ 
  │ se == sesh
  │ 
  │ au == audio
  │ 
  │ jk == jack
  │ 
  │ cfg == config
  │ 
  │ = == assign
  │ 
  │ () == expr
  └────


[GitHub - cloudflare/wirefilter: An execution engine for Wireshark-like
filters] <https://github.com/cloudflare/wirefilter>

[Cloudflare - Building Fast Interpreters in Rust]
<https://blog.cloudflare.com/building-fast-interpreters-in-rust/>

[Introduction - Writing Interpreters in Rust: a Guide]
<https://rust-hosted-langs.github.io/book/>

[Crafting Interpreters] <http://craftinginterpreters.com/>


10 Crates
═════════

10.1 `mpk'
──────────

  The MPK binary providing CLI access to the library features.
  ┌────
  │ mpk 0.1.0
  │ ellis <ellis@rwest.io>
  │ media programming kit
  │ 
  │ USAGE:
  │     mpk [OPTIONS] <SUBCOMMAND>
  │ 
  │ OPTIONS:
  │     -c, --cfg <CFG>     [default: ~/mpk/mpk.toml]
  │         --db-trace      enable DB tracing
  │         --db-profile    enable DB profiling
  │     -h, --help          Print help information
  │     -V, --version       Print version information
  │ 
  │ SUBCOMMANDS:
  │     init      Initialize MPK
  │     play      Play an audio file
  │     run       Run a service
  │     save      Save a session
  │     db        Interact with the database
  │     info      Print info
  │     pack      Package resources [.tar.zst]
  │     unpack    Unpackage resources [.tar.zst]
  │     quit      Shutdown services
  │     help      Print this message or the help of the given subcommand(s)
  └────


10.2 `mpk_config'
─────────────────

  User configuration with read/write support for TOML (typically from
  `mpk.toml'). Used to initialize other modules at runtime (for example
  `DbConfig' for `Mdb::new_with_config').


10.3 `mpk_db'
─────────────

  The `Mdb' struct provides an API to the underlying SQLite database
  which works with the custom structs defined in [types.rs].
  • *Tables*
    • tracks
      ┌────
      │ id integer,
      │ path text,
      │ filesize integer,
      │ duration integer,
      │ channels integer,
      │ bitrate integer,
      │ samplerate integer,
      │ checksum text,
      │ updated datetime
      └────
    • track_tags
      ┌────
      │ track_id integer,
      │ artist text,
      │ title text,
      │ album text,
      │ genre text,
      │ date text,
      │ tracknumber text,
      │ format text,
      │ language text,
      │ country text,
      │ label text,
      │ producer text,
      │ engineer text,
      │ mixer text,
      └────
    • track_tags_musicbrainz
      ┌────
      │ track_id integer,
      │ albumartistid text,
      │ albumid text,
      │ albumstatus text,
      │ albumtype text,
      │ artistid text,
      │ releasegroupid text,
      │ releasetrackid text,
      │ trackid text,
      │ asin text,
      │ musicip_puid text
      └────
    • track_features_lowlevel
      ┌────
      │ track_id integer,
      │ average_loudness real,
      │ barkbands_kurtosis blob,
      │ barkbands_skewness blob,
      │ barkbands_spread blob,
      │ barkbands_frame_size integer,
      │ barkbands blob,
      │ dissonance blob,
      │ hfc blob,
      │ pitch blob,
      │ pitch_instantaneous_confidence blob,
      │ pitch_salience blob,
      │ silence_rate_20db blob,
      │ silence_rate_30db blob,
      │ silence_rate_60db blob,
      │ spectral_centroid blob,
      │ spectral_complexity blob,
      │ spectral_crest blob,
      │ spectral_decrease blob,
      │ spectral_energy blob,
      │ spectral_energyband_high blob,
      │ spectral_energyband_low blob,
      │ spectral_energyband_middle_high blob,
      │ spectral_energyband_middle_low blob,
      │ spectral_flatness_db blob,
      │ spectral_flux blob,
      │ spectral_kurtosis blob,
      │ spectral_rms blob,
      │ spectral_rolloff blob,
      │ spectral_skewness blob,
      │ spectral_spread blob,
      │ spectral_strongpeak blob,
      │ zerocrossingrate blob,
      │ mfcc_frame_size integer,
      │ mfcc blob,
      │ sccoeffs_frame_size integer,
      │ sccoeffs blob,
      │ scvalleys_frame_size integer,
      │ scvalleys blob,
      └────
    • track_features_rhythm
      ┌────
      │ track_id integer,
      │ bpm real,
      │ confidence real,
      │ onset_rate real,
      │ beats_loudness blob,
      │ first_peak_bpm integer,
      │ first_peak_spread real,
      │ first_peak_weight real,
      │ second_peak_bpm integer,
      │ second_peak_spread real,
      │ second_peak_weight real,
      │ beats_position blob,
      │ bpm_estimates blob,
      │ bpm_intervals blob,
      │ onset_times blob,
      │ beats_loudness_band_ratio_frame_size integer,
      │ beats_loudness_band_ratio blob,
      │ histogram blob
      └────
    • track_features_sfx
      ┌────
      │ track_id integer,
      │ pitch_after_max_to_before_max_energy_ratio real,
      │ pitch_centroid real,
      │ pitch_max_to_total real,
      │ pitch_min_to_total real,
      │ inharmonicity blob,
      │ oddtoevenharmonicenergyratio blob,
      │ tristimulus blob
      └────
    • track_features_tonal
      ┌────
      │ track_id integer,
      │ chords_changes_rate real,
      │ chords_number_rate real,
      │ key_strength real,
      │ tuning_diatonic_strength real,
      │ tuning_equal_tempered_deviation real,
      │ tuning_frequency real,
      │ tuning_nontempered_energy_ratio real,
      │ chords_strength blob,
      │ chords_histogram blob,
      │ thpcp blob,
      │ hpcp_frame_size integer,
      │ hpcp blob,
      │ chords_key text,
      │ chords_scale text,
      │ key_key text,
      │ key_scale text,
      │ chords_progression blob,
      └────
    • track_images
      ┌────
      │ track_id integer,
      │ mel_frame_size integer,
      │ mel_spec blob,
      │ log_frame_size integer,
      │ log_spec blob,
      │ freq_frame_size integer,
      │ freq_spec blob
      └────
    • track_user_data
      ┌────
      │ track_id integer,
      │ user_tags text,
      │ notes text,
      └────
    • samples
      ┌────
      │ id integer,
      │ path text,
      │ filesize integer,
      │ duration integer,
      │ channels integer,
      │ bitrate integer,
      │ samplerate integer,
      │ checksum text
      └────
    • sample_features_lowlevel
      ┌────
      │ sample_id integer,
      │ average_loudness real,
      │ barkbands_kurtosis blob,
      │ barkbands_skewness blob,
      │ barkbands_spread blob,
      │ barkbands_frame_size integer,
      │ barkbands blob,
      │ dissonance blob,
      │ hfc blob,
      │ pitch blob,
      │ pitch_instantaneous_confidence blob,
      │ pitch_salience blob,
      │ silence_rate_20db blob,
      │ silence_rate_30db blob,
      │ silence_rate_60db blob,
      │ spectral_centroid blob,
      │ spectral_complexity blob,
      │ spectral_crest blob,
      │ spectral_decrease blob,
      │ spectral_energy blob,
      │ spectral_energyband_high blob,
      │ spectral_energyband_low blob,
      │ spectral_energyband_middle_high blob,
      │ spectral_energyband_middle_low blob,
      │ spectral_flatness_db blob,
      │ spectral_flux blob,
      │ spectral_kurtosis blob,
      │ spectral_rms blob,
      │ spectral_rolloff blob,
      │ spectral_skewness blob,
      │ spectral_spread blob,
      │ spectral_strongpeak blob,
      │ zerocrossingrate blob,
      │ mfcc_frame_size integer,
      │ mfcc blob,
      │ sccoeffs_frame_size integer,
      │ sccoeffs blob,
      │ scvalleys_frame_size integer,
      │ scvalleys blob
      └────
    • sample_features_rhythm
      ┌────
      │ sample_id integer,
      │ bpm real,
      │ confidence real,
      │ onset_rate real,
      │ beats_loudness blob,
      │ first_peak_bpm integer,
      │ first_peak_spread real,
      │ first_peak_weight real,
      │ second_peak_bpm integer,
      │ second_peak_spread real,
      │ second_peak_weight real,
      │ beats_position blob,
      │ bpm_estimates blob,
      │ bpm_intervals blob,
      │ onset_times blob,
      │ beats_loudness_band_ratio_frame_size integer,
      │ beats_loudness_band_ratio blob,
      │ histogram blob
      └────
    • sample_features_sfx
      ┌────
      │ sample_id integer,
      │ pitch_after_max_to_before_max_energy_ratio real,
      │ pitch_centroid real,
      │ pitch_max_to_total real,
      │ pitch_min_to_total real,
      │ inharmonicity blob,
      │ oddtoevenharmonicenergyratio blob,
      │ tristimulus blob
      └────
    • sample_features_tonal
      ┌────
      │ sample_id integer,
      │ chords_changes_rate real,
      │ chords_number_rate real,
      │ key_strength real,
      │ tuning_diatonic_strength real,
      │ tuning_equal_tempered_deviation real,
      │ tuning_frequency real,
      │ tuning_nontempered_energy_ratio real,
      │ chords_strength blob,
      │ chords_histogram blob,
      │ thpcp blob,
      │ hpcp_frame_size integer,
      │ hpcp blob,
      │ chords_key text,
      │ chords_scale text,
      │ key_key text,
      │ key_scale text,
      │ chords_progression blob
      └────
    • sample_images
      ┌────
      │ sample_id integer,
      │ mel_frame_size integer,
      │ mel_spec blob,
      │ log_frame_size integer,
      │ log_spec blob,
      │ freq_frame_size integer,
      │ freq_spec blob
      └────
    • sample_user_data
      ┌────
      │ sample_id integer,
      │ user_tags text,
      │ notes text,
      └────
    • projects
      ┌────
      │ id integer,
      │ name text,
      │ path text,
      │ type text
      └────
    • project_user_data
      ┌────
      │ project_id integer,
      │ user_tags text,
      │ notes text
      └────


[types.rs] <file:src/mpk_db/src/types.rs>


10.4 `mpk_py'
─────────────

  The MIR[1] tool (`mpk_extract.py') uses Python as a bridge between
  Essentia[2] for feature extraction and the MPK database. There are a
  huge amount of features stored in the database (/97/ at time of
  writing), but the feature set will be reduced in future iterations as
  I find the features which are most useful to me. As for the extraction
  algorithms, My plan is to RWiR[3] and reduce DB size by applying
  zstd[4] compression.

  ┌────
  │ 	 +------------------+                             
  │ 	 |  mpk_extract.py  |                            _____________        
  │ 	 +--------+---------+                           /             \       +--------+  +-----------------+
  │ 		  |                                 +-}| Extract(f[0]) |----->| POOL[0]|  |       DB        |
  │ 		  |                                /    \____________ /       |  -  -  |  | -  -  -  -  -  -|
  │ 		  |              +---------+      /      _____________    |   | POOL[1]|  |        |        |
  │ 	  +---------------+      |         |     /      /             \       |  -  -  |  |                 |
  │ 	  |collect_files()|{---->| [files] |----X-----}| Extract(f[1]) |----->|        |  | tracks | samples|
  │ 	  +---------------+      |         |     \      \____________ /       |[ .... ]|  |                 |
  │ 	       /    \            +---------+      \      _____________    |   |        |  |        |        |
  │ 	      /      \                             \    /             \       |  -  -  |  |                 |
  │ 	     /        \                             +-}| Extract(f[N]) |----->| POOL[N]|  |        |        |
  │ 	    o          o                                \____________ /       +--------+  +-----------------+
  │ +-----------------+-----------------+                                             |                ^
  │ |                 |                 |                                             v                |
  │ |     tracks      |     samples     |                                       +------------+         |
  │ |                 |                 |                                       | insert_*() |---------+
  │ +-----------------+-----------------+                                       +------------+  
  │ 
  └────


10.5 `mpk_ffi'
──────────────

  C-compatible MPK FFI with C-header and python binding generators.


10.6 `mpk_audio'
────────────────

  The audio module leverages [cpal] and [rodio] for audio playback and
  recording. It provides high-level standalone tools with simple use
  cases such as playing an audio file on disk and isn't designed for
  low-level DSP.
  • *Modules*
    metro
          a convenient metronome
    chain
          sample chainer[5]


[cpal] <https://github.com/RustAudio/cpal>

[rodio] <https://github.com/RustAudio/rodio>


10.7 `mpk_flate'
────────────────

  Zstd compression and Tar archival utilities.


10.8 `mpk_codec'
────────────────

  Audio file encoding and decoding.


10.9 `mpk_gear'
───────────────

  MPK interface for hardware devices connected via USB.
  • Elektron Octatrack MKII
  • Elektron Analog Rytm MKII
  • DSI Prophet Rev2
  • Korg SV-1


10.10 `mpk_jack'
────────────────

  MPK interface for JACK.


10.11 `mpk_sesh'
────────────────

  MPK session management. Inspired by NSM


10.12 `mpk_midi'
────────────────

  MPK MIDI interface supporting real-time processing, encoding/decoding,
  and Sysex patching.


10.13 `mpk_http'
────────────────

  HTTP client APIs for MPK. Currently includes [freesound.org],
  [musicbrainz.org], and [coverartarchive.org].


[freesound.org] <https://freesound.org/>

[musicbrainz.org] <https://musicbrainz.org/>

[coverartarchive.org] <https://coverartarchive.org/>


10.14 `mpk_osc'
───────────────

  OSC (Open Sound Control) APIs for MPK. Includes an API client for
  [NSM] (New/Non-Session Manager).


[NSM] <https://new-session-manager.jackaudio.org/>


10.15 `mpk_hash'
────────────────

  [BLAKE3] hashing utilities (for file checksums)


[BLAKE3] <https://github.com/BLAKE3-team/BLAKE3>


11 generic arrays
═════════════════

  • use std::array::from_fn for generic arrays
    • #![feature(array_from_fn)]
  • use GATs for graph design
    • #![feature(generic_associated_types)]
  • may also need associated type defaults
    • #![feature(associated_type_defaults)]


12 TODO On Digital Audio Workstations
═════════════════════════════════════

  The DAW (Digital Audio Workstation) has existed for only a moment in
  the continuum of creative mediums. DAWs started appearing in the late
  1970's, thanks to developments made by dedicated engineers such as Max
  Matthews (AT&T), Hal Chamberlin, and David Cox (MTU). These early DAWs
  were born from the commercial need for precise control of audio on
  computers; government funded speech research, commercial telephone
  research, and University computer music synthesis centers. The very
  first DAWs were actually used in US Government funded Speech Research
  for Sonar and the CIA[6].

  Nowadays the DAW is the cornerstone of the studio. It handles audio
  recording, sequencing, mixing and resource management. With such a
  powerful tool, there's rarely a need to work outside of the
  'box'. With a laptop and some inspiration you can get a lot done.

  Like any analog equivalent that has been digitized, users have
  thoroughly benefited from the convenience and ease of use that the DAW
  provides. While at UConn, I would often go to the library and make
  beats on my laptop between classes, sometimes I would even do so while
  attending class. This level of creative portability was unheard of 30
  years ago, and will only get better as mobile device manufacturers
  develop smaller and more powerful chips.

  Another benefit of the DAW is its efficacy in education. Most Music
  Production classes today can be taught without ever entering an analog
  studio. Lectures become project templates and students can follow
  along in their own in-box studios. It has never been easier to learn
  how to make music.

  Indeed, the DAW has been an important evolution in the ways we make
  music. For all the luxuries it endows us with, there's hardly an
  argument to be made against the paradigm. Despite this, I will be
  making one, if only for argument's sake.

  • [Digital sound revolution - Wikipedia]
  • [CCRMA - Music 192B: Week 2, Digital Audio Workstations]


[Digital sound revolution - Wikipedia]
<https://en.wikipedia.org/wiki/Digital_sound_revolution>

[CCRMA - Music 192B: Week 2, Digital Audio Workstations]
<https://ccrma.stanford.edu/courses/192b/ProTools-Logic%20Lec.pdf>

12.1 DAW Workflows
──────────────────

  Let’s take a moment to consider an elementary DAW workflow. For this
  example, we will be using Ableton Live. The process is as follows:

  Jam

        First, we create. This is the most thrilling part of the process
        and part of the reason many computer musicians have trouble
        finishing projects. There is no commitment at this stage and
        much of what we create won’t make it to the finished
        product. We’re free to turn all the knobs, make controversial
        choices, revise, delete, and forget.

  Record

        If you ever want to make art, you must make decisions. This is
        what the next step is all about. We record our Audio and MIDI
        clips in the Session View and loosely arrange them into
        sections. This involves trimming the fat from our jam sesh and
        curating the collection of clips we’re left with. We must be
        acutely aware of our audience, spectral balance, and song
        structure, make tough design decisions, and commit to our
        ideas. This step is deceptively simple, as doing this step well
        will make the remaining steps flow quite easily and save you a
        lot of time. Don’t rush it, as moving on to the next step too
        early will cause you to keep coming back.

  Arrange

        Next, we switch to Arrangement View and begin dragging our clips
        into the timeline. During this process we think in two primary
        dimensions: length, and depth. In the first dimension, each
        section must be of appropriate length as well as the total
        length of our song. In the second, we must assure there is a
        range of depth over time – both spectral and dynamic. Here we
        develop cohesion in our song. Sections should flow from one to
        the next with the intended musical effect, and the song should
        feel structurally sound (pun intended).

  Mix

        Finally, we do the mix. One should take an objective approach to
        this task. Our goal is to trim unintended spectral artifacts and
        make our mix sound good when reproduced on different speaker
        systems.

  There is a healthy level of variation in how these steps are
  performed, but the structure is relatively the same.


12.2 DAWs as Instruments
────────────────────────

12.2.1 Trackers
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  • [Mod love | Salon.com]


[Mod love | Salon.com] <https://www.salon.com/1999/04/29/mod_trackers/>


12.2.2 Patchers
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  • [freesoftware@ircam - A brief history of MAX]
  • [Miller Puckette, IRCAM - The Patcher]


[freesoftware@ircam - A brief history of MAX]
<https://web.archive.org/web/20090603230029/http://freesoftware.ircam.fr/article.php3?id_article=5>

[Miller Puckette, IRCAM - The Patcher]
<http://msp.ucsd.edu/Publications/icmc88.pdf>


12.3 A new paradigm
───────────────────

  • [JACK Audio Connection Kit API]
  • [FAQ · Wiki · PipeWire]
  • [zita-j2n, zita-n2j - Manpage]
  • [Non Session Management API]
  • [OpenSoundControl.org]


[JACK Audio Connection Kit API] <https://jackaudio.org/api/>

[FAQ · Wiki · PipeWire]
<https://gitlab.freedesktop.org/pipewire/pipewire/-/wikis/FAQ>

[zita-j2n, zita-n2j - Manpage]
<http://manpages.ubuntu.com/manpages/bionic/man1/zita-njbridge.1.html>

[Non Session Management API] <http://non.tuxfamily.org/nsm/API.html>

[OpenSoundControl.org]
<https://ccrma.stanford.edu/groups/osc/index.html>



Footnotes
─────────

[1] [Music information retrieval - Wikipedia]
(<https://en.wikipedia.org/wiki/Music_information_retrieval>)

[2] [Essentia - Music Technology Group - Universitat Pompeu Fabra]
(<https://essentia.upf.edu/>)

[3] [ansuz - /random/RIIR] (<https://transitiontech.ca/random/RIIR>)

[4] [Zstandard - Real-time data compression algorithm]
(<http://facebook.github.io/zstd/>)

[5] [GitHub - KaiDrange/OctaChainer]
(<https://github.com/KaiDrange/OctaChainer>)

[6] [Digital Audio Workstation - The Evolution]
(<http://www.mtu.com/support/mtudawevolution.htm>)
