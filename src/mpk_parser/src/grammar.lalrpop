use std::str::FromStr;
use crate::Tok;
use crate::ParserError as Err;
use crate::ast;

grammar;

pub Add: ast::Verb = {
    "+" => ast::Verb::Add,
    "-" => ast::Verb::Sub,
};

extern {
  type Error = Err;
  enum Tok {
    "+" => Tok::Plus,
    "-" => Tok::Minus,
    "~" => Tok::Tilde,
    ":" => Tok::Colon,
    "." => Tok::Dot,
    "," => Tok::Comma,
    "*" => Tok::Star,
    "**" => Tok::StarStar,
    "&" => Tok::Amper,
    "@" => Tok::At,
    "%" => Tok::Percent,
    "//" => Tok::SlashSlash,
    "^" => Tok::Caret,
    "|" => Tok::Vbar,
    "<<" => Tok::LShift,
    ">>" => Tok::RShift,
    "/" => Tok::Slash,
    "(" => Tok::Lpar,
    ")" => Tok::Rpar,
    "[" => Tok::Lsqb,
    "]" => Tok::Rsqb,
    "{" => Tok::Lbr,
    "}" => Tok::Rbr,
    "=" => Tok::Eq,
    "+=" => Tok::PlusEq,
    "-=" => Tok::MinusEq,
    "*=" => Tok::StarEq,
    "@=" => Tok::AtEq,
    "/=" => Tok::SlashEq,
    "<<=" => Tok::LShiftEq,
    ">>=" => Tok::RShiftEq,
    ":=" => Tok::ColonEq,
    "==" => Tok::EqEq,
    "!=" => Tok::NotEq,
    "<" => Tok::Lt,
    "<=" => Tok::LtEq,
    ">" => Tok::Gt,
    ">=" => Tok::GtEq,
    "->" => Tok::RArrow,
    "<-" => Tok::LArrow,
  }
}